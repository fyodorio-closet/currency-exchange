{"version":3,"sources":["webpack:///./src/app/app.component.html","webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.service.ts","webpack:///./src/app/data-fetcher/data-fetcher.service.ts","webpack:///./src/app/state/rates.actions.ts","webpack:///./src/app/state/rates.effects.ts","webpack:///./src/app/state/rates.reducer.ts","webpack:///./src/environments/environment.prod.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA,g2BAAg2B,WAAW,KAAK,WAAW,sdAAsd,WAAW,KAAK,WAAW,kfAAkf,mBAAmB,62BAA62B,cAAc,8JAA8J,2BAA2B,4DAA4D,eAAe,iHAAiH,8DAA8D,gDAAgD,iD;;;;;;;;;;;ACA/sG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;ACZA,mDAAmD,cAAc,iBAAiB,GAAG,oDAAoD,sBAAsB,qBAAqB,GAAG,iCAAiC,iBAAiB,uBAAuB,GAAG,kDAAkD,uBAAuB,GAAG,+BAA+B,oBAAoB,GAAG,4CAA4C,sBAAsB,iBAAiB,mBAAmB,uBAAuB,GAAG,6CAA6C,u3D;;;;;;;;;;;;;;;;;;;;;ACArf;AACL;AAEZ;AAIuB;AAExB;AAO3C,IAAa,YAAY,GAAzB,MAAa,YAAY;IA4BvB,YAAoB,UAAsB,EAAU,KAAwB,EAAS,EAAe;QAAhF,eAAU,GAAV,UAAU,CAAY;QAAU,UAAK,GAAL,KAAK,CAAmB;QAAS,OAAE,GAAF,EAAE,CAAa;QA1BpG,eAAU,GAAG,MAAM,CAAC,IAAI,CAAC;QACzB,iBAAY,GAAc,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACtC,cAAc,EAAE,CAAC,EAAE,CAAC;YACpB,cAAc,EAAE,CAAC,EAAE,CAAC;YACpB,WAAW,EAAE,CAAC,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC,EAAE,CAAC;SAClB,CAAC,CAAC;QAGH,8BAAyB,GAAG,KAAK,CAAC;QAClC,8BAAyB,GAAG,KAAK,CAAC;QAIlC,gBAAW,GAAG,CAAC,CAAC;QAChB,gBAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QACzB,yBAAoB,GAAkB;YACpC,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,EAAE;SACf,CAAC;QACF,wBAAmB,GAAkB;YACnC,gBAAgB,EAAE,EAAE;YACpB,UAAU,EAAE,EAAE;SACf,CAAC;QAIA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,0DAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC/C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YAC/E,IAAI,CAAC,kBAAkB,GAAG;gBACxB,GAAG,IAAI,CAAC,kBAAkB;gBAC1B,IAAI,CAAC,QAAQ,CAAC,IAAI;aACnB,CAAC;YACF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACtC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YACxG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YACxG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YACvF,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;YACvF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,KAAK,GAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC3I,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,8DAAS,EAAE,CAAC,CAAC;QAErC,wBAAwB;QACxB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAC9F,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;YAC1B,IAAI,CAAC,WAAW,GAAG,MAAM,GAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC,CAAC;QAEJ,iCAAiC;QACjC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACjG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC3E,yDAAyD;YACzD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CACtD,IAAI,CAAC,EAAE,CAAC,MAAM,KAAK,IAAI,CACxB,CAAC;YACF,8CAA8C;YAC9C,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,KAAK,KAAK,MAAM,EAAE;gBACjE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;gBAC7D,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;gBACxG,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC;aACjE;YACD,iDAAiD;YACjD,IAAI,CAAC,yBAAyB,GAAG,MAAM,CAAC;YACxC,4BAA4B;YAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC3G,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC,CAAC;QAEJ,iCAAiC;QACjC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACjG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,GAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;YAC3G,IAAI,CAAC,yBAAyB,GAAG,MAAM,CAAC;QAC1C,CAAC,CAAC,CAAC,CAAC;QAEJ,sBAAsB;QACtB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAC9F,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YACnC,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACjE,IAAI,QAAQ,IAAI,QAAQ,KAAK,QAAQ;gBAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,oEAAe,mBAEvE,IAAI,CAAC,OAAO,IACf,IAAI,EAAE,QAAQ,EACd,IAAI,EAAE,IAAI,CAAC,yBAAyB,IAEvC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACxF,CAAC;IAED,QAAQ,CAAC,IAAU;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;QAC1D,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,EAAE;YACzC,IAAI,CAAC,mBAAmB,CAAC,UAAU,GAAG,IAAI,CAAC;YAC3C,OAAO;SACR;QAED,IAAI,CAAC,mBAAmB,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACvD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;YACvC,QAAQ,IAAI,CAAC,MAAM,EAAE;gBACnB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACxD,KAAK,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBAC3D,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,OAAO,CAAC,CAAkB,EAAE,CAAkB,EAAE,KAAc;QACpE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAE/D,IAAI,CAAC,oBAAoB,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACnF,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;QACvD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,oBAAoB,CAAC;IACvD,CAAC;CACF;;YAzGiC,uDAAU;YAAiB,iDAAK;YAAyB,0DAAW;;AA5BzF,YAAY;IALxB,+DAAS,CAAC;QACT,QAAQ,EAAE,wBAAwB;QAClC,2IAAmC;;KAEpC,CAAC;2EA6BgC,uDAAU,EAAiB,iDAAK,EAAyB,0DAAW;GA5BzF,YAAY,CAqIxB;AArIwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBiC;AACjB;AAEM;AACL;AACI;AACO;AACA;AACoB;AACjB;AACH;AACV;AACa;AACuB;AACpB;AACI;AAapC;AA8B3B,IAAa,SAAS,GAAtB,MAAa,SAAS;CAAG;AAAZ,SAAS;IA5BrB,8DAAQ,CAAC;QACR,YAAY,EAAE,CAAC,2DAAY,CAAC;QAC5B,OAAO,EAAE;YACP,uEAAa;YACb,uDAAW,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,iEAAY,EAAE,CAAC;YAC5C,2DAAa,CAAC,OAAO,CAAC,CAAC,iEAAY,CAAC,CAAC;YACrC,qEAAgB;YAChB,mEAAmB;YACnB,sEAAgB;YAChB,gEAAa;YACb,kEAAe;YACf,mEAAgB;YAChB,kEAAe;YACf,qEAAkB;YAClB,iEAAc;YACd,6FAAuB;YACvB,sEAAmB;YACnB,sEAAmB;YACnB,iEAAc;YACd,gEAAa;YACb,yEAAmB,CAAC,UAAU,CAAC;gBAC7B,IAAI,EAAE,6BAA6B;gBACnC,OAAO,EAAE,2EAAW,CAAC,UAAU;aAChC,CAAC;SACH;QACD,SAAS,EAAE,CAAC,qFAAkB,EAAE,wDAAU,EAAE,EAAC,OAAO,EAAE,kEAAe,EAAE,QAAQ,EAAE,OAAO,EAAC,CAAC;QAC1F,SAAS,EAAE,CAAC,2DAAY,CAAC;KAC1B,CAAC;GACW,SAAS,CAAG;AAAH;;;;;;;;;;;;;;;;;;AC1DqB;AAI3C,IAAa,UAAU,GAAvB,MAAa,UAAU;IACd,qBAAqB,CAAC,KAAe,EAAE,OAAe;QAC3D,IAAI,OAAO,KAAK,KAAK,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC;QACzC,6BAA6B;QAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3D,4DAA4D;QAC5D,MAAM,sBAAsB,GAAG,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;QACvD,+DAA+D;QAC/D,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE;YAC5B,IAAI,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAClC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC3D;SACF;QACD,qCAAqC;QACrC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,sBAAsB,CAAC;QAChD,gCAAgC;QAChC,OAAO,UAAU,CAAC,OAAO,CAAC,CAAC;QAC3B,0CAA0C;QAC1C,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;SAC9C,CAAC;QACF,OAAO,WAAW,CAAC;IACrB,CAAC;CACF;AAzBY,UAAU;IADtB,gEAAU,EAAE;GACA,UAAU,CAyBtB;AAzBsB;;;;;;;;;;;;;;;;;;;;;ACJoB;AACO;AAEb;AAEO;AAG5C,MAAM,YAAY,GAAG,kCAAkC,CAAC;AACxD,MAAM,OAAO,GAAG,GAAG,YAAY,QAAQ,CAAC;AACxC,uDAAuD;AACvD,6DAA6D;AAI7D,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAE7B,YAAoB,IAAgB,EAAU,UAAsB;QAAhD,SAAI,GAAJ,IAAI,CAAY;QAAU,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAEzE,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED,aAAa,CAAC,MAAM;QAClB,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;QACjC,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,GAAG,IAAI,EAAE,CAAC,CAAC,IAAI,CACjD,0DAAG,CAAC,CAAC,OAAiB,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CACjF,CAAC;IACJ,CAAC;CACF;;YAb2B,+DAAU;YAAsB,uDAAU;;AAFzD,kBAAkB;IAD9B,gEAAU,EAAE;2EAGe,+DAAU,EAAsB,uDAAU;GAFzD,kBAAkB,CAe9B;AAf8B;;;;;;;;;;;;;ACZ/B;AAAA;AAAA;AAAA;AAAA;AAAA,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,oDAAgC;IAChC,kEAA8C;IAC9C,wDAAoC;AACtC,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AAEM,MAAM,SAAS;IAAtB;QACW,SAAI,GAAG,gBAAgB,CAAC,SAAS,CAAC;IAC7C,CAAC;CAAA;AAEM,MAAM,eAAe;IAE1B,YAAmB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;QAD3B,SAAI,GAAG,gBAAgB,CAAC,eAAe,CAAC;IACV,CAAC;;;;;AAGnC,MAAM,WAAW;IAEtB,YAAmB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;QAD3B,SAAI,GAAG,gBAAgB,CAAC,WAAW,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBC;AACjB;AACiB;AACa;AAEQ;AACU;AAI1E,IAAa,YAAY,GAAzB,MAAa,YAAY;IAavB,YACU,QAAiB,EACjB,WAA+B;QAD/B,aAAQ,GAAR,QAAQ,CAAS;QACjB,gBAAW,GAAX,WAAW,CAAoB;QAd/B,eAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACrC,4DAAM,CAAC,+DAAgB,CAAC,SAAS,CAAC,EAClC,gEAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,EAC3C,gEAAS,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,+CAAE,CAAC,IAAI,0DAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CACnE,CAAC;QAEQ,qBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC7C,4DAAM,CAAC,+DAAgB,CAAC,eAAe,CAAC,EACxC,gEAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAC7D,gEAAS,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,+CAAE,CAAC,IAAI,0DAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CACjE,CAAC;IAKC,CAAC;CACL;;YAHqB,qDAAO;YACJ,qFAAkB;;AAd/B;IAAT,4DAAM,EAAE;;gDAIP;AAEQ;IAAT,4DAAM,EAAE;;sDAIP;AAXS,YAAY;IADxB,gEAAU,EAAE;2EAeS,qDAAO;QACJ,qFAAkB;GAf9B,YAAY,CAiBxB;AAjBwB;;;;;;;;;;;;;ACVzB;AAAA;AAAA;AAAgE;AAGhE,MAAM,iBAAiB,GAAe;IACpC,QAAQ,EAAE;QACR,IAAI,EAAE,EAAE;QACR,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,EAAE;KACV;CACF,CAAC;AAEK,SAAS,YAAY,CAC1B,KAAK,GAAG,iBAAiB,EAAE,MAAmB;IAE9C,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,+DAAgB,CAAC,WAAW,CAAC,CAAC;YACjC,yBACK,KAAK,IACR,QAAQ,EAAE,MAAM,CAAC,OAAO,IACxB;SACH;QACD,KAAK,+DAAgB,CAAC,eAAe,CAAC,CAAC;YACrC,yBACK,KAAK,IACR,QAAQ,oBACH,KAAK,CAAC,QAAQ,IACjB,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,OAE3B;SACH;QACD,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;KACvB;AACH,CAAC;;;;;;;;;;;;;AChCD;AAAA;AAAO,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,IAAI;CACjB,CAAC;;;;;;;;;;;;;ACFF;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEvC;AAElB,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE;KACrB,eAAe,CAAC,yDAAS,CAAC;KAC1B,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"currency-convertor-app\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" fxFlexFill>\\n  <mat-toolbar color=\\\"primary\\\">\\n    <mat-toolbar-row fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n      <span fxFlex>Currency Exchange App</span>\\n      <a href=\\\"https://github.com/loenko/currency-exchange\\\" target=\\\"_blank\\\">\\n        <img src=\\\"../assets/github-logo.png\\\" alt=\\\"Source at Github\\\">\\n      </a>\\n    </mat-toolbar-row>\\n  </mat-toolbar>\\n  <form [formGroup]=\\\"currencyForm\\\" fxFlexFill>\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n      <mat-form-field>\\n        <select id=\\\"source-select\\\" formControlName=\\\"sourceCurrency\\\" matNativeControl>\\n          <option value=\\\"\\\">--Please choose a source currency--</option>\\n          <option *ngFor=\\\"let sourceKey of sourceCurrencyList\\\" value=\\\"{{sourceKey}}\\\">{{sourceKey}}</option>\\n        </select>\\n      </mat-form-field>\\n\\n      <button (click)=\\\"swapCurrencies()\\\" mat-icon-button aria-label=\\\"Swap Currencies\\\">\\n        <mat-icon>cached</mat-icon>\\n      </button>\\n\\n      <mat-form-field>\\n        <select id=\\\"target-select\\\" formControlName=\\\"targetCurrency\\\" matNativeControl>\\n          <option value=\\\"\\\">--Please choose a target currency--</option>\\n          <option *ngFor=\\\"let targetKey of targetCurrencyList\\\" value=\\\"{{targetKey}}\\\">{{targetKey}}</option>\\n        </select>\\n      </mat-form-field>\\n    </div>\\n\\n    <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"counting-row\\\">\\n        <mat-icon>account_balance_wallet</mat-icon>\\n        <mat-form-field>\\n          <input matInput type=\\\"number\\\" formControlName=\\\"sourceValue\\\">\\n        </mat-form-field>\\n        <mat-icon>arrow_forward_ios</mat-icon>\\n        <div class=\\\"mat-h2\\\" id=\\\"target-value\\\">{{targetValue || ''}}</div>\\n      </div>\\n\\n      <mat-form-field>\\n        <input\\n          matInput\\n          [matDatepicker]=\\\"picker\\\"\\n          placeholder=\\\"Choose a date\\\"\\n          [min]=\\\"'1999-01-01'\\\"\\n          [max]=\\\"currentDate\\\"\\n          formControlName=\\\"requestDate\\\">\\n        <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n        <mat-datepicker #picker></mat-datepicker>\\n      </mat-form-field>\\n    </div>\\n\\n  </form>\\n\\n  <div *ngIf=\\\"sortedCurrencyTable.dataSource\\\" class=\\\"mat-elevation-z8 table-container\\\">\\n    <table mat-table matSort (matSortChange)=\\\"sortData($event)\\\" [dataSource]=\\\"sortedCurrencyTable.dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n      <ng-container matColumnDef=\\\"code\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Currency Code </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.code}} </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"value\\\">\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Exchange Rate to {{currentSourceCurrencyName}} </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.value}} </td>\\n      </ng-container>\\n      <tr mat-header-row *matHeaderRowDef=\\\"currentCurrencyTable.displayedColumns; sticky: true\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: currentCurrencyTable.displayedColumns;\\\"></tr>\\n    </table>\\n  </div>\\n\\n</div>\\n\\n\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \".currency-convertor-app .mat-h2 {\\n  margin: 0;\\n  color: green;\\n}\\n.currency-convertor-app .counting-row > mat-icon {\\n  margin-right: 8px;\\n  margin-left: 8px;\\n}\\n.currency-convertor-app table {\\n  width: 400px;\\n  text-align: center;\\n}\\n.currency-convertor-app table .mat-header-cell {\\n  text-align: center;\\n}\\n.currency-convertor-app img {\\n  margin-top: 9px;\\n}\\n.currency-convertor-app .table-container {\\n  min-height: 128px;\\n  height: 50vh;\\n  overflow: auto;\\n  margin-bottom: 5vh;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9meW9kb3IvQ29kZS9URU1QL25ld19hbmd1bGFyX2FwcC9jdXJyZW5jeS1jb252ZXJ0b3IvYXBwcy9jdXJyZW5jeS1jb252ZXJ0b3Ivc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiLCIuLi9hcHBzL2N1cnJlbmN5LWNvbnZlcnRvci9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRTtFQUNFLFNBQUE7RUFDQSxZQUFBO0FDQUo7QURFRTtFQUNFLGlCQUFBO0VBQ0EsZ0JBQUE7QUNBSjtBREVFO0VBQ0UsWUFBQTtFQUNBLGtCQUFBO0FDQUo7QURDSTtFQUNFLGtCQUFBO0FDQ047QURFRTtFQUNFLGVBQUE7QUNBSjtBREVFO0VBQ0UsaUJBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtFQUNBLGtCQUFBO0FDQUoiLCJmaWxlIjoiLi4vYXBwcy9jdXJyZW5jeS1jb252ZXJ0b3Ivc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuY3VycmVuY3ktY29udmVydG9yLWFwcCB7XG4gIC5tYXQtaDIge1xuICAgIG1hcmdpbjogMDtcbiAgICBjb2xvcjogZ3JlZW47XG4gIH1cbiAgLmNvdW50aW5nLXJvdyA+IG1hdC1pY29uIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgICBtYXJnaW4tbGVmdDogOHB4O1xuICB9XG4gIHRhYmxlIHtcbiAgICB3aWR0aDogNDAwcHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIC5tYXQtaGVhZGVyLWNlbGwge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgfVxuICBpbWcge1xuICAgIG1hcmdpbi10b3A6IDlweDtcbiAgfVxuICAudGFibGUtY29udGFpbmVyIHtcbiAgICBtaW4taGVpZ2h0OiAxMjhweDtcbiAgICBoZWlnaHQ6IDUwdmg7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgbWFyZ2luLWJvdHRvbTogNXZoO1xuICB9XG59XG4iLCIuY3VycmVuY3ktY29udmVydG9yLWFwcCAubWF0LWgyIHtcbiAgbWFyZ2luOiAwO1xuICBjb2xvcjogZ3JlZW47XG59XG4uY3VycmVuY3ktY29udmVydG9yLWFwcCAuY291bnRpbmctcm93ID4gbWF0LWljb24ge1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcbiAgbWFyZ2luLWxlZnQ6IDhweDtcbn1cbi5jdXJyZW5jeS1jb252ZXJ0b3ItYXBwIHRhYmxlIHtcbiAgd2lkdGg6IDQwMHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4uY3VycmVuY3ktY29udmVydG9yLWFwcCB0YWJsZSAubWF0LWhlYWRlci1jZWxsIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmN1cnJlbmN5LWNvbnZlcnRvci1hcHAgaW1nIHtcbiAgbWFyZ2luLXRvcDogOXB4O1xufVxuLmN1cnJlbmN5LWNvbnZlcnRvci1hcHAgLnRhYmxlLWNvbnRhaW5lciB7XG4gIG1pbi1oZWlnaHQ6IDEyOHB4O1xuICBoZWlnaHQ6IDUwdmg7XG4gIG92ZXJmbG93OiBhdXRvO1xuICBtYXJnaW4tYm90dG9tOiA1dmg7XG59Il19 */\"","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { Observable, Subscription } from 'rxjs';\nimport { select, Store } from '@ngrx/store';\nimport { Sort } from '@angular/material';\n\nimport { CurrencyTable, RatesState } from './models/rates.model';\nimport { LoadRates, LoadRatesByDate } from './state/rates.actions';\nimport { RatesSet } from './models/rates.model';\nimport { AppService } from './app.service';\n\n@Component({\n  selector: 'currency-convertor-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  rates$: Observable<RatesState>;\n  objectKeys = Object.keys;\n  currencyForm: FormGroup = this.fb.group({\n    sourceCurrency: [''],\n    targetCurrency: [''],\n    sourceValue: [''],\n    requestDate: ['']\n  });\n  sourceCurrencyList: string[];\n  targetCurrencyList: string[];\n  currentSourceCurrencyName = 'EUR';\n  currentTargetCurrencyName = 'USD';\n  defaultDate: string;\n  targetValue: number;\n  dataSet: RatesSet;\n  sourceValue = 1;\n  currentDate = new Date();\n  currentCurrencyTable: CurrencyTable = {\n    displayedColumns: [],\n    dataSource: []\n  };\n  sortedCurrencyTable: CurrencyTable = {\n    displayedColumns: [],\n    dataSource: []\n  };\n  subscription: Subscription;\n\n  constructor(private calculator: AppService, private store: Store<RatesState>, public fb: FormBuilder) {\n    this.rates$ = this.store.pipe(select('state'));\n    this.subscription = this.rates$.subscribe(data => {\n      this.targetCurrencyList = this.objectKeys(data.ratesSet.rates).map(key => key);\n      this.sourceCurrencyList = [\n        ...this.targetCurrencyList,\n        data.ratesSet.base\n      ];\n      this.dataSet = data.ratesSet;\n      this.defaultDate = data.ratesSet.date;\n      this.currencyForm.controls['sourceCurrency'].setValue(this.currentSourceCurrencyName, {onlySelf: true});\n      this.currencyForm.controls['targetCurrency'].setValue(this.currentTargetCurrencyName, {onlySelf: true});\n      this.currencyForm.controls['requestDate'].setValue(this.defaultDate, {onlySelf: true});\n      this.currencyForm.controls['sourceValue'].setValue(this.sourceValue, {onlySelf: true});\n      this.targetValue = this.currencyForm.controls['sourceValue'].value*data.ratesSet.rates[this.currencyForm.controls['targetCurrency'].value];\n      this.generateCurrencyTable();\n    });\n  }\n\n  ngOnInit() {\n    this.store.dispatch(new LoadRates());\n\n    // Process number change\n    this.subscription.add(this.currencyForm.controls['sourceValue'].valueChanges.subscribe(change => {\n      this.sourceValue = change;\n      this.targetValue = change*this.dataSet.rates[this.currentTargetCurrencyName];\n    }));\n\n    // Process source currency change\n    this.subscription.add(this.currencyForm.controls['sourceCurrency'].valueChanges.subscribe(change => {\n      this.dataSet = this.calculator.getRatesByAnotherBase(this.dataSet, change);\n      // In target list remove new currency to avoid repetition\n      this.targetCurrencyList = this.targetCurrencyList.filter(\n        item => change !== item\n      );\n      // Check if currency is flipped and replace it\n      if (this.currencyForm.controls['targetCurrency'].value === change) {\n        this.targetCurrencyList.push(this.currentSourceCurrencyName);\n        this.currencyForm.controls['targetCurrency'].setValue(this.currentSourceCurrencyName, {onlySelf: true});\n        this.currentTargetCurrencyName = this.currentSourceCurrencyName;\n      }\n      // Reference current chosen currency in component\n      this.currentSourceCurrencyName = change;\n      // Change calculation if any\n      this.targetValue = this.sourceValue*this.dataSet.rates[this.currencyForm.controls['targetCurrency'].value];\n      this.generateCurrencyTable();\n    }));\n\n    // Process target currency change\n    this.subscription.add(this.currencyForm.controls['targetCurrency'].valueChanges.subscribe(change => {\n      this.targetValue = this.sourceValue*this.dataSet.rates[this.currencyForm.controls['targetCurrency'].value];\n      this.currentTargetCurrencyName = change;\n    }));\n\n    // Process date change\n    this.subscription.add(this.currencyForm.controls['requestDate'].valueChanges.subscribe(change => {\n      const oldValue = this.dataSet.date;\n      const newValue = new Date(change).toISOString().substring(0, 10);\n      if (newValue && newValue !== oldValue) this.store.dispatch(new LoadRatesByDate(\n        {\n          ...this.dataSet,\n          date: newValue,\n          base: this.currentSourceCurrencyName\n        }\n      ));\n    }));\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  swapCurrencies() {\n    this.currencyForm.controls['sourceCurrency'].setValue(this.currentTargetCurrencyName);\n  }\n\n  sortData(sort: Sort): void {\n    const data = this.currentCurrencyTable.dataSource.slice();\n    if (!sort.active || sort.direction === '') {\n      this.sortedCurrencyTable.dataSource = data;\n      return;\n    }\n\n    this.sortedCurrencyTable.dataSource = data.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      switch (sort.active) {\n        case 'code': return this.compare(a.code, b.code, isAsc);\n        case 'value': return this.compare(a.value, b.value, isAsc);\n        default: return 0;\n      }\n    });\n  }\n\n  private compare(a: number | string, b: number | string, isAsc: boolean): number {\n    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n  }\n\n  private generateCurrencyTable(): void {\n    this.currentCurrencyTable.displayedColumns = ['code', 'value'];\n\n    this.currentCurrencyTable.dataSource = this.objectKeys(this.dataSet.rates).map(key => {\n      return { code: key, value: this.dataSet.rates[key] };\n    });\n    this.sortedCurrencyTable = this.currentCurrencyTable;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ratesReducer } from './state/rates.reducer';\nimport { RatesEffects } from './state/rates.effects';\nimport { DataFetcherService } from './data-fetcher/data-fetcher.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppService } from './app.service';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment.prod';\nimport {\n  MatButtonModule,\n  MatIconModule,\n  MatSelectModule,\n  MatToolbarModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatDatepickerModule,\n  MatNativeDateModule,\n  MatTableModule,\n  MAT_DATE_LOCALE,\n  MatSortModule\n} from '@angular/material';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    StoreModule.forRoot({ state: ratesReducer }),\n    EffectsModule.forRoot([RatesEffects]),\n    HttpClientModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatSelectModule,\n    MatFormFieldModule,\n    MatInputModule,\n    BrowserAnimationsModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatTableModule,\n    MatSortModule,\n    StoreDevtoolsModule.instrument({\n      name: 'NgRx Currency Convertor App',\n      logOnly: environment.production,\n    }),\n  ],\n  providers: [DataFetcherService, AppService, {provide: MAT_DATE_LOCALE, useValue: 'en-GB'}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { RatesSet } from './models/rates.model';\n\n@Injectable()\nexport class AppService {\n  public getRatesByAnotherBase(rates: RatesSet, newBase: string): RatesSet {\n    if (newBase === rates.base) return rates;\n    // Isolate basic set of rates\n    const setOfRates = JSON.parse(JSON.stringify(rates.rates));\n    // Calculate rate of old base by new base for future pushing\n    const rateOfOldBaseByNewBase = 1 / setOfRates[newBase];\n    // Iterate through object with rates to recalculate by new base\n    for (const key in setOfRates) {\n      if (setOfRates.hasOwnProperty(key)) {\n        setOfRates[key] = rates.rates[key] / rates.rates[newBase];\n      }\n    }\n    // Push rate for old base by new base\n    setOfRates[rates.base] = rateOfOldBaseByNewBase;\n    // Remove old base from the list\n    delete setOfRates[newBase];\n    // Compile new response in the same format\n    const newResponse = {\n      base: newBase,\n      date: rates.date,\n      rates: JSON.parse(JSON.stringify(setOfRates))\n    };\n    return newResponse;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AppService } from '../app.service';\nimport { RatesSet } from '../models/rates.model';\n\nconst API_URL_BASE = 'https://api.exchangeratesapi.io/';\nconst API_URL = `${API_URL_BASE}latest`;\n// Mock url is used when the main API is not accessible\n// const API_MOCK_URL = 'https://api.myjson.com/bins/1dnd5n';\n\n\n@Injectable()\nexport class DataFetcherService {\n\n  constructor(private http: HttpClient, private calculator: AppService) { }\n\n  getData(): Observable<any> {\n    return this.http.get(API_URL);\n  }\n\n  getDataByDate(action): Observable<any>{\n    const date = action.payload.date;\n    const base = action.payload.base;\n    return this.http.get(`${API_URL_BASE}${date}`).pipe(\n      map((rateSet: RatesSet) => this.calculator.getRatesByAnotherBase(rateSet, base))\n    );\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { RatesSet } from '../models/rates.model';\n\nexport enum RatesActionTypes {\n  LoadRates = '[Rates] Load Rates',\n  LoadRatesByDate = '[Rates] Load Rates by Date',\n  RatesLoaded = '[Rates] Rates Loaded'\n}\n\nexport class LoadRates implements Action {\n  readonly type = RatesActionTypes.LoadRates;\n}\n\nexport class LoadRatesByDate implements Action {\n  readonly type = RatesActionTypes.LoadRatesByDate;\n  constructor(public payload: RatesSet) {}\n}\n\nexport class RatesLoaded implements Action {\n  readonly type = RatesActionTypes.RatesLoaded;\n  constructor(public payload: RatesSet) {}\n}\n\nexport type RatesAction = LoadRates | LoadRatesByDate | RatesLoaded;\n","import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Effect, Actions, ofType } from '@ngrx/effects';\n\nimport { RatesLoaded, RatesActionTypes } from './rates.actions';\nimport { DataFetcherService } from '../data-fetcher/data-fetcher.service';\nimport { RatesSet } from '../models/rates.model';\n\n@Injectable()\nexport class RatesEffects {\n  @Effect() loadRates$ = this.actions$.pipe(\n      ofType(RatesActionTypes.LoadRates),\n      switchMap(() => this.dataFetcher.getData()),\n      switchMap((ratesSet: RatesSet) => of(new RatesLoaded(ratesSet)))\n  );\n\n  @Effect() loadRatesByDate$ = this.actions$.pipe(\n    ofType(RatesActionTypes.LoadRatesByDate),\n    switchMap((action) => this.dataFetcher.getDataByDate(action)),\n    switchMap((ratesSet: RatesSet) => of(new RatesLoaded(ratesSet)))\n  );\n\n  constructor(\n    private actions$: Actions,\n    private dataFetcher: DataFetcherService\n  ) {}\n}\n","import { RatesAction, RatesActionTypes } from './rates.actions';\nimport { RatesState } from '../models/rates.model';\n\nconst initialRatesState: RatesState = {\n  ratesSet: {\n    base: '',\n    date: '',\n    rates: {}\n  }\n};\n\nexport function ratesReducer(\n  state = initialRatesState, action: RatesAction\n): RatesState {\n  switch (action.type) {\n    case RatesActionTypes.RatesLoaded: {\n      return {\n        ...state,\n        ratesSet: action.payload\n      };\n    }\n    case RatesActionTypes.LoadRatesByDate: {\n      return {\n        ...state,\n        ratesSet: {\n          ...state.ratesSet,\n          date: action.payload.date\n        }\n      };\n    }\n    default: return state;\n  }\n}\n\n","export const environment = {\n  production: true\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}